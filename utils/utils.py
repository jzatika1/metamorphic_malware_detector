import os
import logging.config

def create_directories():
    dirs = ['logging/logs', 'models', 'input', 'output']
    for dir in dirs:
        if not os.path.exists(dir):
            os.makedirs(dir)

def setup_logging(default_path='logging/logger.conf', default_level=logging.INFO, debug=False):
    if os.path.exists(default_path):
        logging.config.fileConfig(default_path)
        if debug:
            for handler in logging.root.handlers:
                handler.setLevel(logging.DEBUG)
            logging.getLogger().setLevel(logging.DEBUG)
        else:
            for handler in logging.root.handlers:
                handler.setLevel(default_level)
            logging.getLogger().setLevel(default_level)
    else:
        logging.basicConfig(level=logging.DEBUG if debug else default_level)

def convert_opcodes_to_numeric(opcode_sequences, opcode_map):
    numeric_sequences = []
    for seq in opcode_sequences:
        numeric_seq = []
        for op in seq:
            if op in opcode_map:
                numeric_seq.append(opcode_map[op])
            else:
                # Optionally log the missing opcode or handle it as needed
                print(f"Warning: Opcode '{op}' not found in the map.")
        if numeric_seq:  # Only add non-empty sequences
            numeric_sequences.append(numeric_seq)
    return numeric_sequences


def split_list(lst, n):
    k, m = divmod(len(lst), n)
    return (lst[i * k + min(i, m):(i + 1) * k + min(i + 1, m)] for i in range(n))

def get_all_file_paths(directories, limit=None):
    all_files = []
    for directory in directories:
        for file in os.listdir(directory):
            if file.endswith('.asm'):
                all_files.append(os.path.join(directory, file))
                if limit and len(all_files) >= limit:
                    return all_files
    return all_files