import os
from typing import List, Dict, Set
from utils.logger import Logger

def create_directories(logger=None):
    if logger is None:
        logger = Logger.setup('utils')
    
    dirs = ['logging/logs', 'models', 'input', 'output']
    logger.info("Creating directories")
    for dir in dirs:
        if not os.path.exists(dir):
            os.makedirs(dir)
            logger.debug(f"Created directory: {dir}")
    logger.info("Directory creation complete")

def convert_opcodes_to_numeric(opcode_sequences, opcode_map, logger=None):
    if logger is None:
        logger = Logger.setup('utils')
    
    logger.info("Converting opcode sequences to numeric")
    numeric_sequences = []
    missing_opcodes = set()
    for seq in opcode_sequences:
        numeric_seq = []
        for op in seq:
            if op in opcode_map:
                numeric_seq.append(opcode_map[op])
            else:
                missing_opcodes.add(op)
        if numeric_seq:  # Only add non-empty sequences
            numeric_sequences.append(numeric_seq)
    
    if missing_opcodes:
        logger.warning(f"Found {len(missing_opcodes)} unknown opcodes: {', '.join(missing_opcodes)}")
    
    logger.info(f"Converted {len(opcode_sequences)} sequences to numeric")
    logger.debug(f"Resulting in {len(numeric_sequences)} non-empty numeric sequences")
    return numeric_sequences

def split_list(lst: List, n: int, logger=None) -> List[List]:
    if logger is None:
        logger = Logger.setup('utils')
    
    logger.info(f"Splitting list of length {len(lst)} into {n} parts")
    k, m = divmod(len(lst), n)
    result = list(lst[i * k + min(i, m):(i + 1) * k + min(i + 1, m)] for i in range(n))
    logger.debug(f"Resulting in {len(result)} sublists")
    return result

def get_all_file_paths(directories: List[str], limit: int = None, logger=None) -> List[str]:
    if logger is None:
        logger = Logger.setup('utils')
    
    logger.info(f"Getting file paths from directories: {', '.join(directories)}")
    all_files = []
    for directory in directories:
        for file in os.listdir(directory):
            if file.endswith('.asm'):
                all_files.append(os.path.join(directory, file))
                logger.debug(f"Added file: {file}")
                if limit and len(all_files) >= limit:
                    logger.info(f"Reached limit of {limit} files")
                    return all_files
    logger.info(f"Found total of {len(all_files)} .asm files")
    return all_files