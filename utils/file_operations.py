import os
from pathlib import Path
from utils.config_manager import config
from utils.logger import Logger

def create_directories(logger=None):
    """
    Create necessary directories for the project based on the configuration.
    
    Args:
        logger (logging.Logger, optional): Logger instance. If not provided, a new one will be created.
    """
    if logger is None:
        logger = Logger.setup('file_operations')
    directories = [
        config.get('data.train_dir', 'data/'),
        config.get('input.input_dir', 'input/'),
        os.path.dirname(config.get('model.trained_hmm_file', 'models/trained_hmm.pkl')),
        os.path.dirname(config.get('classification.output_file', 'output/classification_results.txt'))
    ]
    logger.info("Creating necessary directories")
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        Logger.debug(logger, f"Created directory: {directory}")
    logger.info("All necessary directories have been created")

def get_all_file_paths(directories, limit=None, logger=None):
    """
    Get all file paths from the specified directories.

    Args:
        directories: List of directory paths to search for files.
        limit (int, optional): Limit the number of files to return. Defaults to None.
        logger (logging.Logger, optional): Logger instance. If not provided, a new one will be created.

    Returns:
        List of file paths.
    """
    if logger is None:
        logger = Logger.setup('file_operations')
    logger.info(f"Searching for files in directories: {', '.join(directories)}")
    Logger.debug(logger, f"File limit set to: {limit}" if limit else "No file limit set")
    all_files = []
    for directory in directories:
        for root, _, files in os.walk(directory):
            for file in files:
                file_path = os.path.join(root, file)
                all_files.append(file_path)
                Logger.debug(logger, f"Found file: {file_path}")
                if limit and len(all_files) >= limit:
                    logger.info(f"Reached file limit of {limit}. Stopping file collection.")
                    return all_files[:limit]
    
    logger.info(f"Total files found: {len(all_files)}")
    if limit:
        logger.info(f"Returning {min(limit, len(all_files))} files due to limit")
        return all_files[:limit]
    else:
        return all_files