import os
from pathlib import Path
from typing import List
import logging
from utils.config_manager import config

def create_directories() -> None:
    """
    Create necessary directories for the project based on the configuration.
    """
    directories = [
        config.get('data.train_dir', 'data'),
        config.get('data.test_dir', 'data/test'),
        os.path.dirname(config.get('logging.file', 'logs/app.log')),
        os.path.dirname(config.get('model.trained_hmm_file', 'models/trained_hmm.pkl')),
        os.path.dirname(config.get('classification.output_file', 'output/classification_results.txt'))
    ]

    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
    
    logging.info("Created necessary directories")

def get_all_file_paths(directories: List[str], limit: int = None) -> List[str]:
    """
    Get all file paths from the specified directories.

    Args:
        directories (List[str]): List of directory paths to search for files.
        limit (int, optional): Limit the number of files to return. Defaults to None.

    Returns:
        List[str]: List of file paths.
    """
    all_files = []
    for directory in directories:
        for root, _, files in os.walk(directory):
            for file in files:
                all_files.append(os.path.join(root, file))
                if limit and len(all_files) >= limit:
                    return all_files[:limit]
    
    logging.info(f"Found {len(all_files)} files in the specified directories")
    return all_files if not limit else all_files[:limit]