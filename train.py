import argparse
from utils.config_manager import config
from utils.file_operations import create_directories, get_all_file_paths
from utils.data_preprocessing import process_files_in_batches
from utils.sequence_operations import save_sequences, load_sequences
from utils.hmm_training import train_and_save_hmm_model
from utils.logger import Logger

def parse_arguments():
    """
    Parse command-line arguments.
    Returns:
        Parsed arguments.
    """
    parser = argparse.ArgumentParser(description="Malware detection using HMM")
    parser.add_argument("--limit", type=int, default=None, help="Limit the number of files to load")
    parser.add_argument("--use-saved-sequences", action="store_true", help="Use saved opcode and numeric sequences")
    parser.add_argument("--directories", nargs='+', default=['data'], help="Directories to load files from")
    parser.add_argument("--debug", action="store_true", help="Enable debug logging")
    return parser.parse_args()

def main():
    """
    Main function to run the malware detection process.
    """
    args = parse_arguments()
    Logger.set_global_debug_mode(args.debug)  # Set global debug mode
    logger = Logger.setup('train')
    
    logger.info("Starting malware detection training process")
    logger.debug("Debug mode is enabled")  # This will only show up if debug is True
    
    create_directories()
    
    if args.use_saved_sequences:
        logger.info("Loading saved opcode and numeric sequences")
        all_opcode_sequences, all_numeric_sequences, opcode_map = load_sequences()
        logger.debug(f"Loaded {len(all_opcode_sequences)} opcode sequences and {len(all_numeric_sequences)} numeric sequences")
    else:
        logger.info("Processing new files")
        file_paths = get_all_file_paths(args.directories, limit=args.limit)
        if not file_paths:
            logger.warning("No files found. Exiting.")
            return
        
        logger.debug(f"Processing {len(file_paths)} files")
        batch_size = config.get('preprocessing.batch_size', 10000)
        all_opcode_sequences, all_numeric_sequences, opcode_map, file_sequence_lengths = process_files_in_batches(file_paths, batch_size, remove_duplicates=True)
        
        logger.info("Saving processed sequences")
        save_sequences(all_opcode_sequences, all_numeric_sequences, opcode_map)
        logger.debug(f"Saved {len(all_opcode_sequences)} opcode sequences and {len(all_numeric_sequences)} numeric sequences")
    
    if not all_numeric_sequences:
        logger.error("No valid numeric sequences to train the HMM model. Exiting.")
        return
    else:
        logger.info("Training and saving HMM model")
        train_and_save_hmm_model(all_numeric_sequences)
    
    logger.info("Malware detection training process completed")

if __name__ == "__main__":
    main()