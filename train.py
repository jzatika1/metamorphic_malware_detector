import argparse
import logging
from utils.config_manager import config
from utils.logging_setup import setup_logging
from utils.file_operations import create_directories, get_all_file_paths
from utils.data_preprocessing import process_files_in_batches
from utils.sequence_operations import save_sequences, load_sequences
from utils.hmm_training import train_and_save_hmm_model

def parse_arguments() -> argparse.Namespace:
    """
    Parse command-line arguments.
    Returns:
        argparse.Namespace: Parsed arguments.
    """
    parser = argparse.ArgumentParser(description="Malware detection using HMM")
    parser.add_argument("--debug", action="store_true", help="Enable debug logging")
    parser.add_argument("--limit", type=int, default=None, help="Limit the number of files to load")
    parser.add_argument("--use-saved-sequences", action="store_true", help="Use saved opcode and numeric sequences")
    parser.add_argument("--directories", nargs='+', default=['data'], help="Directories to load files from")
    return parser.parse_args()

def main() -> None:
    """
    Main function to run the malware detection process.
    """
    args = parse_arguments()
    create_directories()
    setup_logging(debug=args.debug)

    logging.info("Starting malware detection process")

    if args.use_saved_sequences:
        logging.info("Loading saved opcode and numeric sequences")
        all_opcode_sequences, all_numeric_sequences, opcode_map = load_sequences()
    else:
        file_paths = get_all_file_paths(args.directories, limit=args.limit)
        logging.info(f"Training with files: {file_paths}")

        batch_size = config.get('preprocessing.batch_size', 10000)
        all_opcode_sequences, all_numeric_sequences, opcode_map, file_sequence_lengths = process_files_in_batches(file_paths, batch_size, remove_duplicates=True, debug=args.debug)

        save_sequences(all_opcode_sequences, all_numeric_sequences, opcode_map)
        logging.info("Saved all opcode sequences, numeric sequences, and opcode map")

    if not all_numeric_sequences:
        logging.error("No valid numeric sequences to train the HMM model.")
    else:
        train_and_save_hmm_model(all_numeric_sequences)

if __name__ == "__main__":
    main()